______________________________________________________________________

 RXPCRE2 - interface between the Rexx language on z/OS and the 
 PCRE2 - regex processing library on same platform.
 REXPCRE - same inerface for non-repeatative calls.

 Version 0.3
 Contributed by:   John Gateley  November 2017.
 Copyright (c) 2017, John Gateley.
 All rights reserved.
______________________________________________________________________

 Redistribution and use in source and binary forms, with or
 without modification, are permitted provided that the following
 conditions are met:

  1. Redistributions of source code must retain the above
  copyright notice, this list of conditions and the following
  disclaimer.

  2. Redistributions in binary form must reproduce the above
  copyright notice, this list of conditions and the following
  disclaimer in the documentation and/or other materials
  provided with the distribution.

  3. Neither the name of the University of Cambridge nor the
  names of its contributors may be used to endorse or promote
  products derived from this software without specific prior
  written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
______________________________________________________________________

 This interface was written by John Gateley in September 2017 and is 
 designed to be used with the  z/OS port of 'PCRE2 - Perl Compatible 
 Regular Expressions' which was  ported by Ze'ev Atlas.

 To assemble these programs you will need the supplied macros and will
 also need to assemble modules STRINGIT which is used in STRING macro
 and TRIMIT which is used by the TRIM macro.  Please refer to the
 JCLLIB that comes with the PCRE2 package for the appropriate JCL.
______________________________________________________________________

This code uses the following functions for the C environment

  EDCXHOTL    create C environment with library functions
  EDCXHOTU    call a C routine
  EDCXHOTT    terminate C environment

This method was chosen because the only example that I could find of
REXX calling C via assembler used this.
CEEPIPI may also work, and is recommended by IBM.  We may look at it
in subsequent releases.

See:-
Article "Calling C functions from Assembler - revisited"
by A Rudd printed in issue 208 of Xephon magazine of January 2004
http://www.cbttape.org/xephon/xephonm/mvs0401.pdf
______________________________________________________________________

It was thought that there were two distinct scenarios that the
use of PCRE from REXX would follow.

1, Parsing a value such as an argument to the REXX program or a
   single record in a control file.
2, Performing a regular expression on every record from a file.

To easily enable these two scenarios two versions of the interface
between REXX and PCRE were developed.

See #REXPCRE below for details of REXXPCRE.  For code example, see the
    #REXPCRE document in the PCRE2.ASM library in the distribution.
See #RXPCRE2 below for details of RXPCRE2.  For code example, see the
    #REXPCR2 document in the PCRE2.ASM library in the distribution.

The two main REXX functions are

REXXPCRE   -  the rexx function for single execution of the REGEX
              returns 0 - no matches
                      1 - matches
                      an error message


RXPCRE2    -  the rexx function for multiple executes of the REGEX
              this is the program which should be called from a
              rexx program to handle perl compatible regular
              expressions.
              It gets the rexx arguments and passes them to RXPCRE2A
              which is a separate load module which also contains
              the C code.
              On first call it loads RXPCRE2A into memory and returns
              the load address to the calling rexx function so that
              subsequent calls to this module can use the same
              version that was previously loaded.
              Returns from this function depend on the command given
              Any error messages from the program are written using
              a call to IRXSAY which is the 'SAY' callable function.

    'CONNECT'    connect to the C environment
                 returns eight bytes of environment information
                 or RC=8
    'COMPILE'    compile a regular expression
                 returns 19 bytes of compile information
                 or RC=8
    'EXECUTE'    run the regex using the input string, output
                 will go to the specified stem variable
                 returns 0 - no matches
                         1 - matches
                         8 - error
    'RELEASE'    remove the specified regex compilation
                 returns 0 - OK
                         8 - error
    'DISCONNECT' terminate the C environment
                 returns 0 - OK
                         8 - error

There are an additional four programs that are used by the above

RXPCRE2A   -  the sub-routine used by RXPCRE2 which contains the
              calls to all the C code and should only be called by
              RXPCRE2 as it uses the rexx environment that exists
              in that module.

PROCSTEM   -  a sub-routine that manipulates rexx stem variables on
              behalf of the calling program.
              Macro PRGSTEM should be used in the calling program
              to define the interface storage.
              This also makes use of the rexx environment.

STRINGIT   -  used by the STRING macro - acts like COBOL STRING.

TRIMIT     -  used by the TRIM macro to remove excess spaces.
______________________________________________________________________
#REXPCRE

 How REXXPCRE works.

   INPUT ARGUMENTS
     1, the PERL regular expression.
     2, the string to be worked on.
     3, a STEM name which will be populated with the output
     4, an optional OPTION
                    'g'  -  match all
                    'i'  -  ignore case
                    'x'  -  exclude white space
     5, an optional code-page - e.g.  'IBM-285'
        if omitted the default local page is used
     6, 'debug' if debugging required. Needs PCREDUMP DD name.

   OUTPUT
        if   successfull
             RC=1    matched  - stem contains output
             RC=0    no match - stem.0 will be '0'
        else
             RC='error message text'
        endif

   STEM variables output
        stem.0             count of stem variables
        stem.STRING.?      matched substrings
        stem.POS.?         position and length of matches e.g. 3,4
        stem.NAME.?        named substrings ' ' if none

   DEBUGGING can be done by specifying 'debug' as argument 6.
             You will also need to allocate the DD name PCREDUMP
             with DISP=MOD if more than one call to REXXPCRE
             because each call is a separate unit of work which
             includes opening and closing the dataset.
			 
A brief discussion about code pages:
Various EBCDIC code pages place the dollar symbol in different code
points. In IBM-037 the dollar is x'5B' but in IBM-285 (UK) this is 
the currency symbol for GBP and the dollar is at x'4A' which is the 
cent symbol in IBM-037. Confusing!                           
Internally PCRE2 uses IBM-1047 so to use the dollar symbol in the 
regex we pass a fifth argument which is the code page name we are 
actually using.  This causes PCRE to convert the regex internally 
from IBM-285 to IBM-1047 before it is compiled, similarly the string 
is converted before the match is done.          

NOTE - this argument is only required if you use a code page in your 
terminal emulator which is NOT the same as the default local code page.
Normal processing by PCRE is to convert the REGEX and string from the 
default local code page to IBM-1047.  IBM-1047 is used by the mainframe 
C compiler.   
*______________________________________________________________________
*
#RXPCRE2
  How RXPCRE2 works.

  This program RXPCRE2 is a rexx function and RXPCRE2A is a helper.
  On the 'connect' call RXPCRE2A is loaded into memory and the
  address of the program is returned, this enables the program to
  be found on subsequent calls.
  The 'disconnect' function terminates the C environment and deletes
  RXPCRE2A from memory.


  There are 5 calls to the function


  1, CONNECT
     Establish the C environment with or without debug.
     If OK returns an eight byte environment handle which should
     be used in subsequent calls to the function.
     An optional third parameter is the code page that is being used,
     this defaults to a z/OS environment variable but can be set
     byt the user.
     If DEBUG is specified then the DDNAME PCREDUMP must be allocated
     with DISP=MOD as the dataset will be opened and closed on
     every call.

     Returns 0 if OK
             8 if failed - an error message will be writen using IRXSAY

       r_c     = RXPCRE2('connect','pcre_env')
       r_c     = RXPCRE2('connect','pcre_env',,'debug')
       r_c     = RXPCRE2('connect','pcre_env','IBM-285')
       r_c     = RXPCRE2('connect','pcre_env','IBM-285','debug')

       if  r_c  > 0 then exit


  2, COMPILE
     Compile a PCRE regular expression.
     This returns an nineteen byte compile handle which should
     be used in subsequent calls to the function.
     Options can be specified
                  'g'  repeat search
                  'i'  ignore case
                  'x'  exclude white space
     Note that multiple regular expressions can be compiled and
     then executed in turn.

     Returns 0 if OK
             8 if failed - an error message will be writen using IRXSAY

       reg_ex  = "(?<char>A)\g<char>"

       r_c     = RXPCRE2('compile',pcre_env,reg_ex,'pcre_comp','g')

       if  r_c  > 0 then exit


  3, EXECUTE
     Process the compiled expression, repeat this call as required.
     The STEM name is used as the first part of the output
     'WANG' will give  WANG.0         the count of matches
                       WANG_STRING.?  the sub-strings
                       WANG_POS.?     the positions within the string
                       WANG_NAME.?    named sub-strings (blank if none)

     returns  0     no match - stem.string.0 will be '0'
              1     matched  - stem.string.? contains output
              8     an error message will be writen using IRXSAY

       the_str   = "AN_AARDWARK_JAKE_AND_AARDWARK_JACK"
       my_stem   = "WANG"

       r_c = RXPCRE2('execute',pcre_env,pcre_comp,the_str,my_stem)

     This call can be repeated as many times as required.


  4, RELEASE
     Release the compile storage
     Returns 0 if successfull.
             8 if failed - an error message will be writen using IRXSAY

       re_lease  = RXPCRE2('release',pcre_env,pcre_comp)


  5, DISCONNECT
     Terminate the C environment.
     Returns 0 if successfull.
             8 if failed - an error message will be writen using IRXSAY

       r_c     = RXPCRE2('disconnect',pcre_env)


  NOTE if any call fails then all storage and compile handles will
       be released and the C environment will be terminated.
       Do not attempt to continue after this.
*______________________________________________________________________
*
     STEM variables output
          stem.0             count of stem variables
          stem_STRING.?      matched substrings
          stem_POS.?         position and length of matches e.g. 3,4
          stem_NAME.?        named substrings ' ' if none

     these stem values will contain the same as stem.0
          stem_STRING.0
          stem_POS.0
          stem_NAME.0
*______________________________________________________________________
*
          PCRELIB

   When running in batch the LOAD macro will try to find the requested
   module/program object in the STEPLIB or JOBLIB concatenation
   which will contain the PDSE library containing RXPCRE2A. This works.

   In ISPF the library would be concatenated to ISPLLIB which will
   allow RXPCRE2 to be loaded, however, when this tries to load
   RXPCRE2A the STEPLIB would be used and would fail.
   It should be possible to put the program library in the ISPLLIB
   concatenation and amend all references to PCRELIB to ISPLLIB
   but this will not work when ISPLLIB is modified using LIBDEF as
   the library is not added to the actual ISPLLIB but to another
   DDNAME which is logically concatenated by ISPF.

   For the above reasons PCRELIB is used. If it is not present in the
   task IO table the program will not attempt to use it.

       /* allow RXPCRE2 to be loaded by REXX */
       "ISPEXEC LIBDEF ISPLLIB DATASET ID ('SDJRG.LOADLIB.POBJ')"
       if rc /= 0 then do
          say 'allocation to ispllib failed.'
          exit
       end
       /* allow RXPCRE2A to be loaded by RXPCRE2A */
       "ALLOC FI(PCRELIB)  DA('?????.LOADLIB.POBJ') SHR"
       if rc /= 0 then do
          say 'allocation to PCRELIB failed.'
          exit
       end

       ...

       "FREE FILE(PCRELIB)"
       "ISPEXEC LIBDEF ISPLLIB "
_____________________________________________________________________
 List of available error messages:
 (We will come with detailed explanations in subsequent releases)
 
RXPCRE2-001 - Error in set environment handle RC=
RXPCRE2-002 - Error in set compile handle RC=
RXPCRE2-003 - Could not find RXPCRE2A in PRCELIB
RXPCRE2-004 - Could not open PCRELIB
RXPCRE2-005 - Could not find RXPCRE2A
RXPCRE2-006 - Return code on SAY=
RXPCRE2-007 - invalid command specified
RXPCRE2-008 - command not specified
RXPCRE2-009 - command length was 0
RXPCRE2-010 - command greater than 20 bytes
RXPCRE2-011 - environment not specified as argument 2
RXPCRE2-012 - environment length was not 8 bytes
RXPCRE2-013 connect - debug command not 'debug'
RXPCRE2-014 compile - regex not specified
RXPCRE2-015 compile - regex length was 0
RXPCRE2-016 compile - regex not null terminated
RXPCRE2-017 compile - options > 20 bytes
RXPCRE2-018 compile - options were null terminated
RXPCRE2-019 compile - options not recognised
RXPCRE2-020 execute - argument compile result not passed
RXPCRE2-021 execute - argument compile result invalid
RXPCRE2-022 execute - string to test is missing
RXPCRE2-023 execute - string to test has zero length
RXPCRE2-024 execute - stem name not available
RXPCRE2-025 execute - stem name has 0 length
RXPCRE2-026 execute - stem name > 20 bytes
RXPCRE2-027 release - compile result not passed
RXPCRE2-028 release - compile result invalid length
RXPCRE2-029 connect - env handle not specified
RXPCRE2-030 connect - env handle length was 0
RXPCRE2-031 connect - env handle > 20 bytes
RXPCRE2-032 connect - env handle was DEBUG
RXPCRE2-033 connect - comp handle not specified
RXPCRE2-034 connect - comp handle length was 0
RXPCRE2-035 connect - comp handle > 20 bytes
RXPCRE2-036 connect - comp handle was DEBUG
RXPCRE2-nnn - unknown error, RC=
RXPCRE2A-001 - Return code on SAY=
RXPCRE2A-002 - debug specified but DD name PCREDUMP not allocated
RXPCRE2A-003 - Invalid command
RXPCRE2A-011 - Ovector not big enough
RXPCRE2A-012 - Ovector not big enough
RXPCRE2A-013 - PCRE2 compilation failed at offset ...
RXPCRE2A-014 - Code page failure
RXPCRE2A-nnn - Unknown error, RC=
REXXPCRE-001 - REGEX (argument 1) not supplied'            
REXXPCRE-002 - REGEX (argument 1) was zero length'         
REXXPCRE-003 - STRING (argument 2) not supplied'           
REXXPCRE-004 - STRING (argument 2) was zero length'        
REXXPCRE-005 - STEM NAME (argument 3) not supplied'        
REXXPCRE-006 - STEM NAME (argument 3) was zero length'     
REXXPCRE-007 - STEM NAME (argument 3) > 20 bytes'          
REXXPCRE-008 - OPTIONS (argument 4) > 20 bytes'            
REXXPCRE-009 - OPTIONS (argument 4) not recognised'        
REXXPCRE-010 - DEBUG (argument 6) <> 5 bytes'              
REXXPCRE-011 - Output value longer than 2048'              
REXXPCRE-012 - Return code on SAY='                        
REXXPCRE-013 - Matching error '                            
REXXPCRE-014 - PCRE2 compilation failed at offset '        
REXXPCRE-015 - Code page failure (argument 5)'             
REXXPCRE-016 - Debug specified but DD name PCREDUMP not allocated'                                                 
REXXPCRE-017 - Ovector not big enough'                     
______________________________________________________________________
