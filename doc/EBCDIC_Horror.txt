EBCDIC Horror
-------------
As many of you know, EBCDIC is NOT one code page but actually several
distinct code pages.  The most common difference between one version
of EBCDIC to another is language specific where Greek, Turkish, Hebrew,
Cyrillic, Arabic, etc. charcters have to be supported in EBCDIC for the
various locales that use IBM mainframes.  Famous examples are:
IBM-037 - USA/Canada - CECP
IBM-273 - Germany F.R./Austria - CECP
IBM-276 - Canada (French) - 94
IBM-277 - Denmark, Norway - CECP
IBM-297 - France - CECP
IBM-284 - Spain/Latin America - CECP
IBM-285 - United Kingdom - CECP
IBM-423 - Greece - 183
IBM-424 - Israel (Hebrew)
IBM-425 - Arabic/Latin for OS/390 Open Edition
IBM-1025 - Cyrillic, Multilingual
IBM-1026 - Latin #5 - Turkey
IBM-1047 - Latin 1/Open Systems

(see https://www-01.ibm.com/software/globalization/cp/cp_cpgid.html
for an extensive list, including non-EBCDIC and multi-byte codes.
Note that the discussion inhere assumes only eight bits code sets!)

The fact of multi-EBCDIC code pages unto itself should not be a problem
for any regular expression engine (or any other software).  The real 
problem is IBM's (mis)handling of some special characters! Specifically
the charcters $,^,[,],# (and others) may occupay totally different code 
points between one code page to the other.  And these are some of the 
most prominent special characters that are used to express regular 
expressions.

I admit not being fully aware about the situation and not fully 
handling it in the versions of PCRE/PCRE2 for z/OS prior to the current
version.  So much so that I will have to rewrite parts of the 
documentation and slightly change my automated process.  However, I
would like to push this version, with the proper remedy for the issue,
out of the door immediately and than go back and redo the process and 
the documentation.

Solution for PCRE2
------------------
In devising a solution for the EBCDIC Horror I had these design goals 
in mind:
1. Users of PCRE2 are interested in applying regular expressions to 
   their subject strings and not in performing cumbersome codepage
   conversions.
2. The most reliable way to handle code page differences must be a 
   tried and true method, prefferably from the vendor (IBM) and not 
   some new development.
3. For most users, but not all, the native (locale) codpage is also 
   the code page that they see on their emulator.  Those users should
   not be bothered with the code page specifics.
In essence I wanted to provide a minimal API that would hide as much of 
the gory details from the user.
   
IBM has settled on IBM-1047 as the best option and is using it as the 
base code page.  The IBM C compiler is specifically geared to work in
IBM-1047 as its native code page.  Thus, if you work with IBM-1047 and 
only with IBM-1047, you may use the PCRE2 in this ditribution as is and
not bother with the rest of this document.

IBM also supply a set of standard conversiobn function that are 
available to all in their C/C++ Runtime Library.  These are the 
iconv(), iconv_open() and iconv_close() functions which when are 
coupled with the setlocale() and nl_langinfo() functions and with the 
langinfo.h, locale.h and iconv.h header files could help to correctly 
convert any EBCDIC string between any pairs of EBCDIC (and to some 
extent, non-EBCDIC) code pages.

The new version of PCRE2 for z/OS provides a front end for using this
conversion functionality in tandem with PCRE2 while hiding the gory 
details from the user who is interested in using regular expressions,
not in string conversions, memory allocations, etc.  In essence, the
user calls these API functions and pass the results to PCRE2.  BUT the 
user should NEVER look directly at the results of of these functions.
Rather, the user should stick with his/her own original regular 
expressions and subject strings in their original code page.

Here is the API, described in C.  Whenever the parameter to the 
function is described with **, it is the same as 'by reference' and 
provides a value returned to the user.  

The basic usage of this API is a one time initialization of the 
conversion process and then convert the input regular expression and 
input subject string.  The converted strings are then to be supplied 
to the PCRE2 in the usual way.

The output ovector is a vector of offsets.  These are valid offsets 
against the original unconvertyed input, so there is no need to 
convert back.  The user has to just use the original subject with the 
ovector.  The names of named captured patterns in the ovector are 
limited to [A-Za-z0-9_].  As far as I know, these are not really a 
subject for the EBCDIC horror, so there should be no conversion back 
on those as well.

/*  pcrz_codeset_init <=> ZCSINIT             */   
int ZCSINIT (ZCSSTRCT ** handle_ptr,        /* returned handle */  
                      char * codeset_name,  /* input codeset name 
                                               e.g. IBM-037 
					       or NULL if locale 
					       codeset is to be used */    
                      size_t codeset_name_size, /* codeset name size -
                                               actual size or any of:
                                               -1 for null terminated
                                               -2 for space terminated
                                               */
                      size_t pattern_size,  /* maximum anticipated 
                                               regex size 
					       or 0 for default */		
                      size_t subject_size); /* maximum anticipated
                                               subject string size 
					       or 0 for default */
                                    
1. Determines the native (or use supplied) input CODESET.  If a codeset 
   name is not supplied (NULL), the function will use the locale 
   information.               
2. Initializie conversion from that codeset into IBM-1047.     
3. Allocate two blocks of memory for the IBM-1047 intermediate       
   strings, one for the pattern and one for the subject string.     
Warning: you may run on a mchine with one native codest while you 
view it as another (a common scenario would be running on a standard
IBM-1047 installation while your 3270 emulator is set to, let's say,
IBM-285 because you are in the UK.)  In such cases you have to override 
the locale by supplying your emulator codeset.            
Note that the internal CODESET is always IBM1-1047 which is the IBM   
C/C++ compiler default and the way the binaries are distributed.        
pattern_size and subject_size are the estimated max sizes for       
the largest pattern and largest subject string, default to 2048 and 
8192 correspondingly when the user specifies 0 value. 
The returned handle should be preserved.              
The function returns -1 in case of failure, 0 in case of success and 1
when no conversion is necessary.  The user should not bother with the
distinction between rc 0 and 1 as the other sunctions know how to 
handle both situations.             
                                                                      
/*  pcrz_codeset_convert_pattern <=> ZCSCONVP */                  
int ZCSCONVP (ZCSSTRCT *zcsstrct_ptr,      /* handle returned from
                                              ZCSINIT */
         char * input_pattern,             /* pointer to input regex */
		 size_t pattern_length,            /* regex size or 0 for null
		                                      terminated string */       
         char ** output_pattern,           /* handle for converted 
		                                      regex to be supplied to 
						      PCRE2 compile function */
		 size_t ** out_pattern_length);    /* converted regex size */ 
/*  pcrz_codeset_convert_subject <=> ZCSCONVS */                  
int ZCSCONVS (ZCSSTRCT *zcsstrct_ptr,      /* handle returned from
                                              ZCSINIT */              
         char * input_subject,             /* pointer to input subject 
		                                      string */ 
		 size_t subject_length,            /* subject string size or 0 
		                                      for nullterminated 
						      string */
         char ** output_subject,           /* handle for converted 
		                                      subject string to be  
						      supplied to PCRE2 execute 
						      function */ 
		 size_t ** out_subject_length);    /* converted subject string 
		                                      size */ 
                        
These are front end conversion functions, converting pattern or subject 
strings from the local codeset to IBM-1047.  This is done via two 
distinct functions (to avoid user direct interaction with the gory 
details:                                              
The functions return pointer to converted string and its size.  If size
is not supplied (value 0) the function will assume a zero terminated
input string and will calculate the length.
The functions returns -1 in case of failure and 0 in case of success 
 
/*  pcrz_codeset_release <=> ZCSRLSE          */                  
extern void ZCSRLSE (ZCSSTRCT *zcsstrct_ptr); /* handle returned from
                                                 ZCSINIT */                

Releasing the formerly initialized environment and deallocating any 
allocated memory. 
______________________________________________________________________
 List of available error messages:
 (We will come with detailed explanations in subsequent releases)

ZCSINIT-001: failed to allocate ZCSSTRCT block        
ZCSINIT-002: CODESET name length %d too large         
ZCSINIT-003: CODESET name too long                
ZCSINIT-004: CODESET name size %d too large        
ZCSINIT-005: Cannot open converter from %s to %s       
ZCSINIT-006: failed to allocate space for converted pattern
ZCSINIT-007: failed to allocate space for converted subject
ZCSCONVx-001: target length gt allocated block              
ZCSCONVx-001: Error in converting subject string  
