  How REXXPCRE works.

   INPUT ARGUMENTS
     1, the PERL regular expression.
     2, the string to be worked on.
     3, a STEM name which will be populated with the output
     4, an optional OPTION
                    'g'  -  match all
                    'i'  -  ignore case
                    'x'  -  exclude white space
     5, an optional code-page - e.g.  'IBM-285'
        if omitted the default local page is used
     6, 'debug' if debugging required. Needs PCREDUMP DD name.

   OUTPUT
        if   successfull
             RC=1    matched  - stem contains output
             RC=0    no match - stem.0 will be '0'
        else
             RC='error message text'
        endif

   STEM variables output
        stem.0             count of stem variables
        stem.STRING.?      matched substrings
        stem.POS.?         position and length of matches e.g. 3,4
        stem.NAME.?        named substrings ' ' if none

   DEBUGGING can be done by specifying 'debug' as argument 6.
             You will also need to allocate the DD name PCREDUMP
             with DISP=MOD if more than one call to REXXPCRE
             because each call is a separate unit of work which
             includes opening and closing the dataset.
*______________________________________________________________________
*
/*REXX*/

  "ISPEXEC LIBDEF ISPLLIB DATASET ID ('MY.LOAD.LIBRARY') STACK"

  /*  test 1                                                  */

  reg_ex  = "(?<char>A)\g<char>"
  the_str = "AN_AARDWARK_JAKE_AND_aaRDWARK_JACK"
  my_stem = "WANG"
  opt_ion = "gi"

  say the_str

  drop wang.

  re_sponse = REXXPCRE(reg_ex,the_str,my_stem,opt_ion)

  select
     when re_sponse = 1 then do
        say 'wang.0  is  ' wang.0
        do lo_op_r = 1 to wang.0
           say  wang.string.lo_op_r
           say  wang.pos.lo_op_r  '       '  wang.name.lo_op_r
        end
       end
     when re_sponse = 0 then
        say 'no matches found'
     Otherwise
        say 'Error :' re_sponse
  end

  drop wang.

  say '  '

  /*  test 2                                                  */

  the_str = "The quick brown fox jumps over the lazy dog."
  the_Str = the_str||"The quick brown fox jumps over the"
  reg_ex  = "(quick|jump)"
  my_stem = "WANG"

  say the_str

  /* no option specified but use debug mode                   */

  re_sponse = REXXPCRE(reg_ex,the_str,my_stem,,,'debug')

  select
     when re_sponse = 1 then do
        say 'wang.0  is  ' wang.0
        do lo_op_r = 1 to wang.0
           say  wang.string.lo_op_r
           say  wang.pos.lo_op_r  '       '  wang.name.lo_op_r
        end
       end
     when re_sponse = 0 then
        say 'no matches found'
     Otherwise
        say 'Error :' re_sponse
  end

  drop wang.

  say '  '

  /*  test 3                                                  */

  the_str = "A fat cat doesn't eat oat but a rat eats bats."
  reg_ex  = "(at)"
  my_stem = "WANG"
  opt_ion = "g"

  say the_str

  re_sponse = REXXPCRE(reg_ex,the_str,my_stem,opt_ion)

  select
     when re_sponse = 1 then do
        say 'wang.0  is  ' wang.0
        do lo_op_r = 1 to wang.0
           say  wang.string.lo_op_r
           say  wang.pos.lo_op_r  '       '  wang.name.lo_op_r
        end
       end
     when re_sponse = 0 then
        say 'no matches found'
     Otherwise
        say 'Error :' re_sponse
  end

  drop wang.

  /*  test 4                                                  */

  the_str = "He_jumps_brown_fox"
  reg_ex  = "(?<first>quick|jumps_+(?<second>brown|over)_+(fox|the))"
  my_stem = "WANG"

  say the_str

  re_sponse = REXXPCRE(reg_ex,the_str,my_stem,'g')

  select
     when re_sponse = 1 then do
        say 'wang.0  is  ' wang.0
        do lo_op_r = 1 to wang.0
           say  wang.string.lo_op_r
           say  wang.pos.lo_op_r  '       '  wang.name.lo_op_r
        end
       end
     when re_sponse = 0 then
        say 'no matches found'
     Otherwise
        say 'Error :' re_sponse
  end

  /*  test 5                                                  */
  /*                                                          */
  /*  this test uses the dollar symbol which is code page     */
  /*  dependant in EBCDIC. In IBM-037 the dollar is x'5B'     */
  /*  but in IBM-285 (UK) this is the currency symbol         */
  /*  for GBP and the dollar is at x'4A' which is the cent    */
  /*  symbol in IBM-037. Confusing!                           */
  /*  Internally PCRE2 uses IBM-1047 so to use the dollar     */
  /*  symbol in the regex we pass a fifth argument which      */
  /*  is the code page name we are actually using.            */
  /*  This causes PCRE to convert the regex from IBM-285      */
  /*  to IBM-1047 before it is compiled, similarly the        */
  /*  string is converted before the match is done.           */

  /*  NOTE - this argument is only required if you use        */
  /*         a code page in your terminal emulator which      */
  /*         is NOT the same as the default local code page.  */
  /*         Normal processing by PCRE is to convert the      */
  /*         REGEX and string from the default local code     */
  /*         page to IBM-1047.                                */
  /*         IBM-1047 is used by the mainframe C compiler.    */

  pa_rm    = "INDSN(DSNAME(MEMBER))"

  reg_ex  = "\((.*)\)¢"
  opt_ion = "g"
  code_pg = "IBM-285'

  say pa_rm
  say reg_ex

  re_sponse = REXXPCRE(reg_ex,pa_rm,'wang',opt_ion,code_pg)

  select
     when re_sponse = 1 then do
        say 'wang.0  is  ' wang.0
        do lo_op_r = 1 to wang.0
           var_1  =  substr(wang_string.lo_op_r,1,30)
           var_2  =  substr(wang_pos.lo_op_r,1,10)
           var_3  =  wang_name.lo_op_r
           say  var_1 var_2 var_3
        end
       end
     when re_sponse = 0 then
        say 'no matches found'
     Otherwise
        say 'Error :' re_sponse
  end

  drop wang.

  "ispexec libdef ispllib "

  exit
*______________________________________________________________________
*
