  How RXPCRE2 works.

  This program RXPCRE2 is a rexx function and RXPCRE2A is a helper.
  On the 'connect' call RXPCRE2A is loaded into memory and the
  address of the program is returned, this enables the program to
  be found on subsequent calls.
  The 'disconnect' function terminates the C environment and deletes
  RXPCRE2A from memory.


  There are 5 calls to the function


  1, CONNECT
     Establish the C environment with or without debug.
     If OK returns an eight byte environment handle which should
     be used in subsequent calls to the function.
     An optional third parameter is the code page that is being used,
     this defaults to a z/OS environment variable but can be set
     byt the user.
     If DEBUG is specified then the DDNAME PCREDUMP must be allocated
     with DISP=MOD as the dataset will be opened and closed on
     every call.

     Returns 0 if OK
             8 if failed - an error message will be writen using IRXSAY

       r_c     = RXPCRE2('connect','pcre_env')
       r_c     = RXPCRE2('connect','pcre_env',,'debug')
       r_c     = RXPCRE2('connect','pcre_env')
       r_c     = RXPCRE2('connect','pcre_env','IBM-285','debug')

       if  r_c  > 0 then exit


  2, COMPILE
     Compile a PCRE regular expression.
     This returns an nineteen byte compile handle which should
     be used in subsequent calls to the function.
     Options can be specified
                  'g'  repeat search
                  'i'  ignore case
                  'x'  exclude white space
     Note that multiple regular expressions can be compiled and
     then executed in turn.

     Returns 0 if OK
             8 if failed - an error message will be writen using IRXSAY

       reg_ex  = "(?<char>A)\g<char>"

       r_c     = RXPCRE2('compile',pcre_env,reg_ex,'pcre_comp','g')

       if  r_c  > 0 then exit


  3, EXECUTE
     Process the compiled expression, repeat this call as required.
     The STEM name is used as the first part of the output
     'WANG' will give  WANG.0         the count of matches
                       WANG_STRING.?  the sub-strings
                       WANG_POS.?     the positions within the string
                       WANG_NAME.?    named sub-strings (blank if none)

     returns  0     no match - stem.string.0 will be '0'
              1     matched  - stem.string.? contains output
              8     an error message will be writen using IRXSAY

       the_str   = "AN_AARDWARK_JAKE_AND_AARDWARK_JACK"
       my_stem   = "WANG"

       r_c = RXPCRE2('execute',pcre_env,pcre_comp,the_str,my_stem)

     This call can be repeated as many times as required.


  4, RELEASE
     Release the compile storage
     Returns 0 if successfull.
             8 if failed - an error message will be writen using IRXSAY

       re_lease  = RXPCRE2('release',pcre_env,pcre_comp)


  5, DISCONNECT
     Terminate the C environment.
     Returns 0 if successfull.
             8 if failed - an error message will be writen using IRXSAY

       r_c     = RXPCRE2('disconnect',pcre_env)


  NOTE if any call fails then all storage and compile handles will
       be released and the C environment will be terminated.
       Do not attempt to continue after this.
*______________________________________________________________________
*
     STEM variables output
          stem.0             count of stem variables
          stem_STRING.?      matched substrings
          stem_POS.?         position and length of matches e.g. 3,4
          stem_NAME.?        named substrings ' ' if none

     these stem values will contain the same as stem.0
          stem_STRING.0
          stem_POS.0
          stem_NAME.0
*______________________________________________________________________
*
          PCRELIB

   When running in batch the LOAD macro will try to find the requested
   module/program object in the STEPLIB or JOBLIB concatenation
   which will contain the PDSE library containing RXPCRE2A. This works.

   In ISPF the library would be concatenated to ISPLLIB which will
   allow RXPCRE2 to be loaded, however, when this tries to load
   RXPCRE2A the STEPLIB would be used and would fail.
   It should be possible to put the program library in the ISPLLIB
   concatenation and amend all references to PCRELIB to ISPLLIB
   but this will not work when ISPLLIB is modified using LIBDEF as
   the library is not added to the actual ISPLLIB but to another
   DDNAME which is logically concatenated by ISPF.

   For the above reasons PCRELIB is used. If it is not present in the
   task IO table the program will not attempt to use it.

       /* allow RXPCRE2 to be loaded by REXX */
       "ISPEXEC LIBDEF ISPLLIB DATASET ID ('SDJRG.LOADLIB.POBJ')"
       if rc /= 0 then do
          say 'allocation to ispllib failed.'
          exit
       end
       /* allow RXPCRE2A to be loaded by RXPCRE2A */
       "ALLOC FI(PCRELIB)  DA('?????.LOADLIB.POBJ') SHR"
       if rc /= 0 then do
          say 'allocation to PCRELIB failed.'
          exit
       end

       ...

       "FREE FILE(PCRELIB)"
       "ISPEXEC LIBDEF ISPLLIB "
*______________________________________________________________________
*
