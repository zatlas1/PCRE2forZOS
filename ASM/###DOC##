This code uses the following functions for the C environment

  EDCXHOTL    create C environment with library functions
  EDCXHOTU    call a C routine
  EDCXHOTT    terminate C environment

This method was chosen because the only example that I could find of
REXX calling C via assembler used this.

See:-
Article "Calling C functions from Assembler - revisited"
by A Rudd printed in issue 208 of Xephon magazine of January 2004
http://www.cbttape.org/xephon/xephonm/mvs0401.pdf


It was thought that there were two distinct scenarios that the
use of PCRE from REXX would follow.

1, Parsing a value such as an argument to the REXX program or a
   single record in a control file.
2, Performing a regular expression on every record from a file.

To easily enable these two scenarios two versions of the interface
between REXX and PCRE were developed.

See #REXPCRE for details of REXXPCRE
See #RXPCRE2 for details of RXPCRE2

The two main REXX functions are

REXXPCRE   -  the rexx function for single execution of the REGEX
              returns 0 - no matches
                      1 - matches
                      an error message


RXPCRE2    -  the rexx function for multiple executes of the REGEX
              this is the program which should be called from a
              rexx program to handle perl compatible regular
              expressions.
              It gets the rexx arguments and passes them to RXPCRE2A
              which is a separate load module which also contains
              the C code.
              On first call it loads RXPCRE2A into memory and returns
              the load address to the calling rexx function so that
              subsequent calls to this module can use the same
              version that was previously loaded.
              Returns from this function depend on the command given
              Any error messages from the program are written using
              a call to IRXSAY which is the 'SAY' callable function.

    'CONNECT'    connect to the C environment
                 returns eight bytes of environment information
                 or RC=8
    'COMPILE'    compile a regular expression
                 returns 19 bytes of compile information
                 or RC=8
    'EXECUTE'    run the regex using the input string, output
                 will go to the specified stem variable
                 returns 0 - no matches
                         1 - matches
                         8 - error
    'RELEASE'    remove the specified regex compilation
                 returns 0 - OK
                         8 - error
    'DISCONNECT' terminate the C environment
                 returns 0 - OK
                         8 - error

There are an additional four programs that are used by the above

RXPCRE2A   -  the sub-routine used by RXPCRE2 which contains the
              calls to all the C code and should only be called by
              RXPCRE2 as it uses the rexx environment that exists
              in that module.

PROCSTEM   -  a sub-routine that manipulates rexx stem variables on
              behalf of the calling program.
              Macro PRGSTEM should be used in the calling program
              to define the interface storage.
              This also makes use of the rexx environment.

STRINGIT   -  used by the STRING macro - acts like COBOL STRING.

TRIMIT     -  used by the TRIM macro to remove excess spaces.

