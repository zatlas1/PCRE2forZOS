       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'PCOBDEM2'.
       AUTHOR. Ze'ev Atlas.
       DATE-WRITTEN. July 2015.
      **************************************************
      *           PCRE2 DEMONSTRATION PROGRAM          *
      **************************************************
      * This is an adaptation to cobol of the original pcre2demo.c
      * Also, it assumes z/OS and EBCDIC, so parts and comments that
      *discuss UNIX/LINUX/WINDOWS were removed or altered, as well as
      *ASCII specificparts.

      * This is a demonstration program to illustrate a
      *straightforward way of calling the PCRE2 regular expression
      *library from a C program.  See the pcre2sample documentation
      *for a short discussion ("man pcre2sample" if you have
      *the PCRE2 man pages installed). PCRE2 is a revised API for
      *the library, and is incompatible with the original PCRE API.

      * There are actually three libraries, each supporting a
      *different code unit width. This demonstration program uses the
      *8-bit library.  This version deals with EBCDIC only.

      * For installing PCRE2 on z/OS, please follow the instructions
      *that came with this package.
      *
      *---------------------------------------------------------------
      * Copyright (c) 2015 Ze'ev Atlas
      * Please refer to the LICENSE document to see all other
      * applicable copyrights.
      *
      *---------------------------------------------------------------
      *Redistribution and use in source and binary forms, with or
      *without modification, are permitted provided that the following
      *conditions are met:

      * 1. Redistributions of source code must retain the above
      * copyright notice, this list of conditions and the following
      * disclaimer.

      * 2. Redistributions in binary form must reproduce the above
      * copyright notice, this list of conditions and the following
      * disclaimer in the documentation and/or other materials
      * provided with the distribution.

      * 3. Neither the name of the University of Cambridge nor the
      * names of its contributors may be used to endorse or promote
      * products derived from this software without specific prior
      * written permission.

      *THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
      *CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
      *INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
      *MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
      *DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
      *CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
      *SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
      *NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
      *LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
      *HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
      *CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
      *OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
      *EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
      *---------------------------------------------------------------
      * While the original UNIX/Windows program now supports the
      *testing of the 8-bit, 16-bit and 16-bit PCRE libraries
      *program, the z/OS COBOL (and C) versions support only 8 bit
      *EBCDIC.  Modules such as COMPLIE2 (originally pcre_compile.c)
      *in the library itself, are also specifically compiled for 8 bit
      *EBCDIC.

      *This experimental version tries to work with memory management

      *****************************************************************
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       Special-Names.
           SYSIN is Pattern-Input.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT INFILE ASSIGN TO SYSIN.

      *****************************************************************
       DATA DIVISION.
       FILE SECTION.

       FD  INFILE
                RECORDING MODE IS F
                BLOCK CONTAINS 0 RECORDS
                LABEL RECORDS ARE STANDARD.
       01  INPUT-RECORD.
                05  FILLER                PIC X(80).

       WORKING-STORAGE SECTION.
       01  WS-PARM-DATA             PIC X(256) VALUE SPACES.
       01  WS-PARM1                 PIC X(256).
       01  WS-CNT-PARM1             PIC S9(4) COMP.
       01  WS-PARM2                 PIC X(256).
       01  WS-CNT-PARM2             PIC S9(4) COMP.
       01  WS-PARM3                 PIC X(256).
       01  WS-CNT-PARM3             PIC S9(4) COMP.
       01  WS-buffer                PIC X(256).
       01  WS-TALLY-PARM-BUFFER     PIC S9(9) COMP.
       01  tabptr                   USAGE POINTER.
       01 display-comp              PIC -(10)9.
       01 i                         PIC S9(8) COMP.
       01 j                         PIC S9(8) COMP.
       01  d                        PIC S9(8) BINARY.
       01  n                        PIC S9(8) COMP.
       01  filler                   redefines n.
           05 filler                pic xx.
           05 n-x                   pic xx.
       01  always-zero              pic s9(9) binary value zero.
       01  always-256               pic s9(9) binary value 256.
       COPY    PCREWS2.
       COPY    pcre2.
      * define PCRE2_CODE_UNIT_WIDTH 8

       LINKAGE SECTION.
       01  PARM-BUFFER.
           05  PARM-LENGTH         pic S9(4)   comp.
           05  PARM-DATA           pic X(256).
      * Reasonable size for the demo
       01  LS-OVEC.
           05  LS-OVECTOR              pic 9(9) COMP OCCURS 1000
               INDEXED BY LS-OVECTOR-IX.
      * Reasonable size for the demo
       01  LS-NAME-TABLE.
           05 LS-NAME-NUMBER       PIC 9(4) COMP.
           05 LS-NAME              PIC X(1024).
       01  FILLER       REDEFINES LS-NAME-TABLE.
      * This is a dirty trick to allow setting pointer up
           05 LS-NAME-X            PIC X OCCURS 1028
               INDEXED BY LS-NAME-IX.

      *****************************************************************
       PROCEDURE DIVISION USING PARM-BUFFER.

      ****************************************************************
      * Here is the program. The API includes the concept of         *
      * "contexts" for setting up unusual interface requirements for *
      * compiling and matching, \such as custom memory managers and  *
      * non-standard newline definitions. This program does not do   *
      * any of this, so it makes no use of contexts, always passing  *
      * NULL where a context could be given.                         *
      ****************************************************************

      ****************************************************************
      * First, sort out the command line. There is only one possible *
      * option at the moment, "-g" to request repeated matching to   *
      * find all occurrences, like Perl's /g option. We set the      *
      * variable find_all to a non-zero value if the -g option is    *
      * present. Apart from that, there must be exactly two          *
      * arguments.                                                   *
      ****************************************************************
           MOVE 0 TO PCREWS-find-all
      * In Z/OS we accept parameters.
           IF PARM-LENGTH > 0
              MOVE PARM-DATA (1:PARM-LENGTH) TO WS-PARM-DATA
      * Parse the command line (JCL PARM) the COBOL way :)
              UNSTRING WS-PARM-DATA DELIMITED BY ALL SPACE INTO
                 WS-PARM1 COUNT IN WS-CNT-PARM1
                 WS-PARM2 COUNT IN WS-CNT-PARM2
                 WS-PARM3 COUNT IN WS-CNT-PARM3
                 TALLYING IN WS-TALLY-PARM-BUFFER
              END-UNSTRING
              MOVE x'00' TO WS-PARM1 (WS-CNT-PARM1 + 1:1)
              MOVE x'00' TO WS-PARM2 (WS-CNT-PARM2 + 1:1)
              MOVE x'00' TO WS-PARM3 (WS-CNT-PARM3 + 1:1)
              if  WS-CNT-PARM1 = 2
                 if WS-PARM1(1:2) = '-g'
                    MOVE 1 TO PCREWS-find-all
                    MOVE WS-PARM2 TO WS-PARM1
                    MOVE WS-CNT-PARM2 TO WS-CNT-PARM1
                    MOVE WS-PARM3 TO WS-PARM2
                    MOVE WS-CNT-PARM3 TO WS-CNT-PARM2
                    SUBTRACT 1 FROM WS-TALLY-PARM-BUFFER
                 end-if
              end-if
      * After the options, we require exactly two arguments, which are
      * the pattern, and the subject string.
      *       IF WS-TALLY-PARM-BUFFER NOT = 2
      *          DISPLAY
      *          'Two arguments required: a regex and a subject string'
      *          MOVE 1 TO RETURN-CODE
      *          GOBACK
      *       END-IF
      *    ELSE
           END-IF
              OPEN INPUT INFILE
              READ INFILE INTO WS-PARM1
              READ INFILE INTO WS-PARM2
              CLOSE INFILE
              DISPLAY 'PCOBDEM2 - COBOL READ INPUT'
              display
           "----+----1----+----2----+----3----+----4----+----5----+--"
              display WS-PARM1
              display WS-PARM2
      *    call 'pcrz_space_to_null_term_str' using
              call 'ZSPC2NUL' using
                                   by reference WS-PARM1
                                   by value 80
              end-call
      * note the returning clause to get the length
      *    call 'pcrz_space_to_null_term_str' using
              call 'ZSPC2NUL' using
                                   by reference WS-PARM2
                                   by value 80
                                   returning WS-CNT-PARM2
              end-call
      * Make strings into null terminated
      *    END-IF
      * As pattern and subject are char arguments, they can be
      * straightforwardly cast to PCRE2_SPTR as we are working in
      * 8-bit code units.

           SET PCREWS-PATTERN-PTR TO ADDRESS OF WS-PARM1
           SET PCREWS-SUBJECT-PTR TO ADDRESS OF WS-PARM2
           MOVE WS-CNT-PARM2 TO PCREWS-subject-length

      *****************************************************************
      * Now we are going to compile the regular expression pattern,   *
      * and handle any errors that are detected.                      *
      *****************************************************************
      * pcre2_code *pcre2_compile(PCRE2_SPTR pattern,
      *  PCRE2_SIZE length, uint32_t options, int *errorcode,
      *  PCRE2_SIZE *erroroffset, pcre2_compile_context *ccontext);
           call 'COMPILE2' using
                by value     pcrews-pattern-ptr
                BY VALUE     PCRE2-ZERO-TERMINATED
                BY VALUE 0
                BY reference PCREWS-errornumber
                BY reference pcrews-erroroffset
                BY VALUE pcrews-null-ptr
                RETURNING PCREWS-RE-PTR
           end-call
      * Explanation:
      * the pattern */
      * indicates pattern is zero-terminated */
      * default options */
      * for error number */
      * for error offset */
      * use default compile context */

      * Compilation failed: print the error message and exit.
      * int pcre2_get_error_message(int errorcode,
      *   PCRE2_UCHAR *buffer, PCRE2_SIZE bufflen);

           if PCREWS-RE-PTR = NULL
              call 'GETERROR' USING
                 BY VALUE PCREWS-errornumber
                 BY REFERENCE WS-BUFFER
                 BY VALUE  256
              end-call
              MOVE PCREWS-ERROROFFSET TO display-comp
              DISPLAY 'PCRE2 compilation failed at offset '
                 display-comp
                 WS-BUFFER
                MOVE 1 TO RETURN-CODE
              GOBACK
           end-if

      *****************************************************************
      * If the compilation succeeded, we call PCRE again, in order to *
      * do a pattern match against the subject string. This does just *
      * ONE match. If further matching is needed, it will be done     *
      * below. Before running the match we must set up a match_data   *
      * block for holding the result.                                 *
      *****************************************************************

      * Using this function ensures that the block is exactly the right
      * size for the number of capturing parentheses in the pattern.

      * pcre2_match_data *pcre2_match_data_create_from_pattern(
      *  const pcre2_code *code, pcre2_general_context *gcontext);

           CALL 'MATCDCFP' USING
              BY VALUE PCREWS-RE-PTR
              BY VALUE pcrews-null-ptr
              RETURNING PCREWS-match-data
           end-call

      * int pcre2_match(const pcre2_code *code, PCRE2_SPTR subject,
      *  PCRE2_SIZE length, PCRE2_SIZE startoffset,
      *  uint32_t options, pcre2_match_data *match_data,
      *  pcre2_match_context *mcontext);

           CALL 'MATCH2' USING
              BY VALUE PCREWS-RE-PTR
              BY VALUE PCREWS-SUBJECT-PTR
              BY VALUE PCREWS-subject-length
              BY VALUE 0
              BY VALUE 0
              BY VALUE PCREWS-match-data
              BY VALUE pcrews-null-ptr
              RETURNING PCREWS-RC
           end-call
      * Explanation:
      * the compiled pattern */
      * the subject string */
      * the length of the subject */
      * start at offset 0 in the subject */
      * default options */
      * block for storing the result */
      * use default match context */

      * Matching failed: handle error cases
           IF PCREWS-RC < 0
              EVALUATE PCREWS-RC
                 WHEN PCRE2-ERROR-NOMATCH
                    DISPLAY "No match"
      * Handle other special cases if you like
                 WHEN OTHER
                    MOVE PCREWS-RC TO display-comp
                    DISPLAY "Matching error " display-comp
              END-EVALUATE
      * Release memory used for the match
      * void pcre2_match_data_free(match_data);
              CALL 'MATCHDFR' USING
                 BY VALUE PCREWS-match-data
              END-CALL
      * data and the compiled pattern.
      * void pcre2_code_free(code);
              CALL 'CODEFREE' USING
                 BY VALUE PCREWS-RE-PTR
              END-CALL
                MOVE 1 TO RETURN-CODE
              GOBACK
           end-if

      * Match succeded. Get a pointer to the output vector, where
      * string offsets are stored.
      * PCRE2_SIZE *pcre2_get_ovector_pointer(
      *  pcre2_match_data *match_data)
           CALL 'GETOVEPT' USING
              BY VALUE PCREWS-match-data
              RETURNING PCREWS-ovector
           END-CALL
      *
           SET ADDRESS OF LS-OVEC TO PCREWS-ovector
           DISPLAY ' '
           MOVE LS-OVECTOR (1) TO display-comp
           DISPLAY "Match succeeded at offset " display-comp

      *****************************************************************
      * We have found the first match within the subject string. If   *
      * the output vector wasn't big enough, say so. Then output any  *
      * substrings that were captured.                                *
      *****************************************************************

      * The output vector wasn't big enough. This should not happen,
      * because we used pcre2_match_data_create_from_pattern() above.

           IF PCREWS-RC = 0
              DISPLAY
           "ovector was not big enough for all the captured substrings"
           end-if

      * Show substrings stored in the output vector by number.
      * Obviously, in a real application you might want to do things
      * other than print them.

           PERFORM VARYING I FROM 1 BY 1 UNTIL i > PCREWS-RC
              COMPUTE j = (i * 2) - 1
              ADD 1 TO LS-OVECTOR(j) GIVING PCREWS-substring-start
              SUBTRACT ls-ovector(j) FROM LS-OVECTOR(j + 1)
                 GIVING PCREWS-substring-length
              MOVE I TO display-comp
              DISPLAY display-comp ': '
                 WS-PARM2
                (PCREWS-substring-start:PCREWS-substring-length)
           END-PERFORM

      ****************************************************************
      * That concludes the basic part of this demonstration program. *
      * We have compiled a pattern, and performed a single match. The*
      * code that follows shows first how to access named substrings,*
      * and then how to code for repeated matches on the same subject*
      ****************************************************************

      * See if there are any named substrings, and if so, show them by
      * name. First we have to extract the count of named parentheses
      * from the pattern.
      * int pcre2_pattern_info(const pcre2 *code, uint32_t what,
      *  void *where);

           CALL 'PATTERN2' USING
              BY VALUE PCREWS-RE-PTR
              BY VALUE PCRE2-INFO-NAMECOUNT
              BY REFERENCE PCREWS-NAMECOUNT
           END-CALL
      * Explanation:
      * the compiled pattern */
      * get the number of named substrings */
      * where to put the answer */

           if PCREWS-NAMECOUNT <= 0
              DISPLAY "No named substrings"
           else
              DISPLAY "Named substrings"

      * Before we can access the substrings, we must extract the table
      * for translating names to numbers, and the size of each entry
      * in the table.

              CALL 'PATTERN2' USING
                 BY VALUE PCREWS-RE-PTR
                 BY VALUE PCRE2-INFO-NAMETABLE
                 BY REFERENCE PCREWS-NAME-TABLE
              END-CALL
      *       CALL 'DUMPMEM' USING
      *            BY VALUE PCREWS-NAME-TABLE
      *            BY REFERENCE ALWAYS-256 END-CALL
      *Explanation:
      * the compiled pattern */
      * address of the table */
      * where to put the answer */

              CALL 'PATTERN2' USING
                 BY VALUE PCREWS-RE-PTR
                 BY VALUE PCRE2-INFO-NAMEENTRYSIZE
                 BY REFERENCE PCREWS-NAME-ENTRY-SIZE
              END-CALL
      *Explanation:
      * the compiled pattern */
      * size of each entry in the table */
      * where to put the answer */

      * Now we can scan the table and, for each entry, print the
      * number, the name,  and the substring itself. In the 8-bit
      * library the number is held in two bytes, most significant
      * first.

              SET tabptr TO PCREWS-NAME-TABLE
              PERFORM VARYING i FROM 1 BY 1 UNTIL i > PCREWS-namecount
                 SET ADDRESS OF LS-NAME-TABLE TO tabptr
                 SUBTRACT 3 FROM PCREWS-NAME-ENTRY-SIZE GIVING d
                 COMPUTE j = ((LS-NAME-NUMBER + 1) * 2) - 1
                 ADD 1 TO LS-OVECTOR(j) GIVING PCREWS-substring-start
                 SUBTRACT ls-ovector(j) FROM LS-OVECTOR(j + 1)
                    GIVING PCREWS-substring-length
                 MOVE PCREWS-substring-length TO display-comp
                 DISPLAY '(' display-comp ') '  LS-NAME (1:d) ': '
                    WS-PARM2
                    (PCREWS-substring-start:PCREWS-substring-length)
                 SET LS-NAME-IX TO 1
                 SET LS-NAME-IX UP BY PCREWS-NAME-ENTRY-SIZE
                 SET tabptr TO ADDRESS OF LS-NAME-X (LS-NAME-IX)
              END-PERFORM
           END-IF

      *****************************************************************
      * If the "-g" option was given on the command line, we want to  *
      * continue to search for additional matches in the subject      *
      * string, in a similar way to the /g option in Perl. This turns *
      * out to be trickier than you might think because of the        *
      * possibility of matching an empty string. What happens is as   *
      * follows:                                                      *
      *                                                               *
      * If the previous match was NOT for an empty string, we can just*
      * start the next match at the end of the previous one.          *
      *                                                               *
      * If the previous match WAS for an empty string, we can't do    *
      * that, as it would lead to an infinite loop. Instead, a call of*
      * pcre2_match() is made with the PCRE2_NOTEMPTY_ATSTART and     *
      * PCRE2_ANCHORED flags set. The first of these tells PCRE2 that *
      * an empty string at the start of the subject is not a valid    *
      * match; other possibilities must be tried. The second flag     *
      * restricts PCRE2 to one match attempt at the initial string    *
      * position. If this match succeeds, an alternative to the empty *
      * string match has been found, and we can print it and proceed  *
      * round the loop, advancing by the length of whatever was found.*
      * If this match does not succeed, we still stay in the loop,    *
      * advancing by just one character. In UTF-8 mode, which can be  *
      * set by (*UTF) in the pattern, this may be more than one byte. *
      *                                                               *
      * However, there is a complication concerned with newlines. When*
      * the newline convention is such that CRLF is a valid newline,  *
      * we must advance by two characters rather than one. The newline*
      * convention can be set in the regex by (*CR), etc.; if not, we *
      * must find the default.                                        *
      *****************************************************************

      * Check for -g */
           if PCREWS-find-all = 0
      * Release the memory that was used
      * for the match data and the pattern.
      * Exit the program.

      * void pcre2_match_data_free(match_data);
              CALL 'MATCHDFR' USING
                 BY VALUE PCREWS-match-data
              END-CALL
      * void pcre2_code_free(code);
              CALL 'CODEFREE' USING
                 BY VALUE PCREWS-RE-PTR
              END-CALL
              MOVE 0 TO RETURN-CODE
              GOBACK
           END-IF

      * Before running the loop, check for UTF-8 and whether CRLF is a
      * valid newline sequence. First, find the options with which the
      * regex was compiled and extract the UTF state.
           CALL 'PATTERN2' USING
              BY VALUE PCREWS-RE-PTR
              BY VALUE PCRE2-INFO-ALLOPTIONS
              BY REFERENCE PCREWS-OPTION-BITS
           END-CALL
      * The original checks individual bits which is hard in COBOL, so
      * I just display the bits as a number
      * utf8 = (option_bits & PCRE2_UTF) != 0;
           move pcrews-option-bits to display-comp
           display "COBOL DISPLAY - OPTION BITS IS: " display-comp

      * Now find the newline convention and see whether CRLF is a
      * valid newline sequence.
      * This is irrelevant in z/OS and EBCDIC

           CALL 'PATTERN2' USING
              BY VALUE PCREWS-RE-PTR
              BY VALUE PCRE2-INFO-NEWLINE
              BY REFERENCE PCREWS-newline
           END-CALL
      * I just display the newline as a number
      * crlf_is_newline = newline == PCRE2_NEWLINE_ANY ..
      *                   newline == PCRE2_NEWLINE_CRLF ..
      *                   newline == PCRE2_NEWLINE_ANYCRLF;
           move pcrews-option-bits to display-comp
           display "COBOL DISPLAY - NEWLINE IS: " display-comp

      * Loop for second and subsequent matches
           PERFORM UNTIL always-zero > 0
      * Normally no options
              MOVE ZERO TO PCREWS-OPTION-BITS
              move ls-ovector (2) TO PCREWS-start-offset
      * Start at end of previous match */

      * If the previous match was for an empty string, we are finished
      * if we are at the end of the subject. Otherwise, arrange to run
      * another match at the same point to see if a non-empty match
      * can be found.

              IF ls-ovector(1) = ls-ovector(2)
                 if ls-ovector (1) = PCREWS-subject-length
      *             EXIT PERFORM
      * if EXIT PERFORM is not available uncomment the
      * EXIT-FOREVER-LOOP lable after the end-perform and use:
                    GO TO EXIT-FOREVER-LOOP
                 end-if
                 ADD PCRE2-NOTEMPTY-ATSTART to PCRE2-ANCHORED
                     GIVING PCREWS-OPTION-BITS
              end-if

      * Run the next matching operation */
      * the compiled pattern */
      * the subject string */
      * the length of the subject */
      * starting offset in the subject */
      * options */
      * block for storing the result */
      * use default match context */
              CALL 'MATCH2' USING
                 BY VALUE PCREWS-RE-PTR
                 BY VALUE PCREWS-SUBJECT-PTR
                 BY VALUE PCREWS-subject-length
                 BY VALUE PCREWS-start-offset
                 BY VALUE PCREWS-OPTION-BITS
                 BY VALUE PCREWS-match-data
                 BY VALUE pcrews-null-ptr
                 RETURNING PCREWS-RC
              end-call

      * This time, a result of NOMATCH isn't an error. If the value in
      * "options" is zero, it just means we have found all possible
      * matches, so the loop ends.  Otherwise, it means we have failed
      * to find a non-empty-string match at a point where there was a
      * previous empty-string match. In this case, we do what Perl
      * does: advance the matching position by one character, and
      * continue. We do this by setting the "end of previous match"
      * offset, because that is picked up at the top of the loop as
      * the point at which to start again.

      * There are two complications: (a) When CRLF is a valid newline
      * sequence, and the current position is just before it, advance
      * by an extra byte. (b) Otherwise we must ensure that we skip an
      * entire UTF character if we are in UTF mode.
      * ZA: however, these complications are irrelevant foe z/OS and
      * EBCDIC, so the whole dealing with them was eliminated.

              if PCREWS-RC = PCRE2-ERROR-NOMATCH
                 if PCREWS-OPTION-BITS = 0
      * All matches found */
      *             EXIT PERFORM
      * if EXIT PERFORM is not available uncomment the
      * EXIT-FOREVER-LOOP lable after the end-perform and use:
                    GO TO EXIT-FOREVER-LOOP
                 end-if
                 ADD 1 to PCREWS-start-offset giving ls-ovector (2)
      * Advance one code unit */
      * eliminated code:
      * if (crlf_is_newline &&              /* If CRLF is newline & */
      *    start_offset < subject_length - 1 && /* we are at CRLF, */
      *    subject.start_offset. == '\r' &&
      *    subject.start_offset + 1. == '\n')
      *    ovector.1. += 1;                 /* Advance by one more. */
      * else if (utf8)                      /* Otherwise, ensure we */
      * {                                   /* advance a whole UTF-8 */
      *    while (ovector.1. < subject_length) /* character. */
      *    {
      *    if ((subject.ovector.1.. & 0xc0) != 0x80) break;
      *    ovector.1. += 1;
      *    }
      * }
      *          EXIT PERFORM CYCLE
      * Go round the loop again */
      * if EXIT PERFORM CYCLE is not available in your compiler then
      * you'll have to comment the next end-if and  confine the
      * restricts of the perform within else/if or evaluate
      *       end-if
      * The else below is for COBOL prior to 5.2 <---<<<
              else

      * Other matching errors are not recoverable. */

              if PCREWS-RC < 0
                 MOVE PCREWS-RC TO display-comp
                 DISPLAY "Matching error " display-comp
                 CALL 'MATCHDFR' USING
                    BY VALUE PCREWS-match-data
                 END-CALL
                 CALL 'CODEFREE' USING
                    BY VALUE PCREWS-RE-PTR
                 END-CALL
                 MOVE 1 TO RETURN-CODE
                 GOBACK
              end-if

      * Match succeded

              DISPLAY ' '
              MOVE LS-OVECTOR(1) TO display-comp
              DISPLAY "Match succeeded again at offset " display-comp

      * The match succeeded, but the output vector wasn't big enough.
      * This should not happen.

              if PCREWS-RC = 0
                 DISPLAY
           "ovector was not big enough for all the captured substrings"
              end-if

      * As before, show substrings stored in the output vector by
      * number, and then also any named substrings.

              PERFORM VARYING I FROM 1 BY 1 UNTIL i > PCREWS-RC
                 COMPUTE j = (i * 2) - 1
                 ADD 1 TO LS-OVECTOR(j) GIVING PCREWS-substring-start
                 SUBTRACT ls-ovector(j) FROM LS-OVECTOR(j + 1)
                    GIVING PCREWS-substring-length
                 MOVE I TO display-comp
                 DISPLAY display-comp ': '
                    WS-PARM2
                    (PCREWS-substring-start:PCREWS-substring-length)
              END-PERFORM

              if PCREWS-namecount <= 0
                 DISPLAY "No named substrings"

              else
                 SET tabptr TO PCREWS-NAME-TABLE
                 display "Named substrings"
                 PERFORM VARYING i FROM 1 BY 1 UNTIL i >
                         PCREWS-namecount
                    SET ADDRESS OF LS-NAME-TABLE TO tabptr
                    SUBTRACT 3 FROM PCREWS-NAME-ENTRY-SIZE GIVING d
                    COMPUTE j = ((LS-NAME-NUMBER + 1) * 2) - 1
                    ADD 1 TO LS-OVECTOR(j) GIVING
                        PCREWS-substring-start
                    SUBTRACT ls-ovector(j) FROM LS-OVECTOR(j + 1)
                       GIVING PCREWS-substring-length
                    MOVE PCREWS-substring-length TO display-comp
                    DISPLAY '(' display-comp ') '  LS-NAME (1:d) ': '
                       WS-PARM2
                       (PCREWS-substring-start:PCREWS-substring-length)
                    SET LS-NAME-IX TO 1
                    SET LS-NAME-IX UP BY PCREWS-NAME-ENTRY-SIZE
                    SET tabptr TO ADDRESS OF LS-NAME-X (LS-NAME-IX)
                 END-PERFORM
              end-if
      * The end-if below is for COBOL prior to 5.2 <---<<<
      * and it closes the superflouos else
              end-if
           END-PERFORM.
      * End of loop to find second and subsequent matches */

       EXIT-FOREVER-LOOP.
           CALL 'MATCHDFR' USING
              BY VALUE PCREWS-match-data
           END-CALL
           CALL 'CODEFREE' USING
              BY VALUE PCREWS-RE-PTR
           END-CALL
           MOVE 0 TO RETURN-CODE
           GOBACK.
        COPY DUMPMEM.
        END PROGRAM 'PCOBDEM2'.
      * End of pcre2demo.c
