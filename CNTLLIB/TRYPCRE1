 /*REXX*/

 /*
  This is a sample code on how to use the PEXXPCRE interface between
  the Rexx language on z/OS and the PCRE2 - regex processing library
  on same platform.
  Version 0.1
  Contributed by:   John Gateley  January 2017.
  Copyright (c) 2017, John Gateley.
  All rights reserved.

  ---------------------------------------------------------------
  Redistribution and use in source and binary forms, with or
  without modification, are permitted provided that the following
  conditions are met:

   1. Redistributions of source code must retain the above
   copyright notice, this list of conditions and the following
   disclaimer.

   2. Redistributions in binary form must reproduce the above
   copyright notice, this list of conditions and the following
   disclaimer in the documentation and/or other materials
   provided with the distribution.

   3. Neither the name of the University of Cambridge nor the
   names of its contributors may be used to endorse or promote
   products derived from this software without specific prior
   written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

 /* when running under TSO we first need to add the load libraries
   to the ISPLLIB concatenation

   "ISPEXEC LIBDEF ISPLLIB DATASET ID ('ZATLAS1.PCRE2.LOADLIB') STACK"*/

   "ISPEXEC LIBDEF ISPLLIB DATASET ID ('MY.LOAD.LIBRARY') STACK"

   /*  test 1                                                  */

   reg_ex  = "(?<char>A)\g<char>"
   the_str = "AN_AARDWARK_JAKE_AND_aaRDWARK_JACK"
   my_stem = "WANG"
   opt_ion = "gi"
   code_pg = "IBM-285'

   say the_str

   drop wang.

   re_sponse = REXXPCRE(reg_ex,the_str,my_stem,opt_ion)

   select
      when re_sponse = 1 then do
         say 'wang.0  is  ' wang.0
         do lo_op_r = 1 to wang.0
            say  wang.string.lo_op_r
            say  wang.pos.lo_op_r  '       '  wang.name.lo_op_r
         end
        end
      when re_sponse = 0 then
         say 'no matches found'
      Otherwise
         say 'Error :' re_sponse
   end

   drop wang.

   say '  '

   /*  test 2                                                  */

   the_str = "The quick brown fox jumps over the lazy dog."
   the_Str = the_str||"The quick brown fox jumps over the"
   reg_ex  = "(quick|jump)"
   my_stem = "WANG"

   say the_str

   /* no option specified but use debug mode                   */

   re_sponse = REXXPCRE(reg_ex,the_str,my_stem,,,'debug')

   select
      when re_sponse = 1 then do
         say 'wang.0  is  ' wang.0
         do lo_op_r = 1 to wang.0
            say  wang.string.lo_op_r
            say  wang.pos.lo_op_r  '       '  wang.name.lo_op_r
         end
        end
      when re_sponse = 0 then
         say 'no matches found'
      Otherwise
         say 'Error :' re_sponse
   end

   drop wang.

   say '  '

   /*  test 3                                                  */

   the_str = "A fat cat doesn't eat oat but a rat eats bats."
   reg_ex  = "(at)"
   my_stem = "WANG"
   opt_ion = "g"

   say the_str

   re_sponse = REXXPCRE(reg_ex,the_str,my_stem,opt_ion)

   select
      when re_sponse = 1 then do
         say 'wang.0  is  ' wang.0
         do lo_op_r = 1 to wang.0
            say  wang.string.lo_op_r
            say  wang.pos.lo_op_r  '       '  wang.name.lo_op_r
         end
        end
      when re_sponse = 0 then
         say 'no matches found'
      Otherwise
         say 'Error :' re_sponse
   end

   drop wang.

   /*  test 4                                                  */

   the_str = "He_jumps_brown_fox"
   reg_ex  = "(?<first>quick|jumps_+(?<second>brown|over)_+(fox|the))"
   my_stem = "WANG"

   say the_str

   re_sponse = REXXPCRE(reg_ex,the_str,my_stem,'g')

   select
      when re_sponse = 1 then do
         say 'wang.0  is  ' wang.0
         do lo_op_r = 1 to wang.0
            say  wang.string.lo_op_r
            say  wang.pos.lo_op_r  '       '  wang.name.lo_op_r
         end
        end
      when re_sponse = 0 then
         say 'no matches found'
      Otherwise
         say 'Error :' re_sponse
   end

   /*  test 5                                                  */
   /*                                                          */
   /*  this test uses the dollar symbol which is code page     */
   /*  dependant in EBCDIC. In IBM-037 the dollar is x'5B'     */
   /*  but in IBM-285 (UK) this is the currency symbol         */
   /*  for GBP and the dollar is at x'4A' which is the cent    */
   /*  symbol in IBM-037. Confusing!                           */
   /*  Internally PCRE2 uses IBM-1047 so to use the dollar     */
   /*  symbol in the regex we pass a fifth argument which      */
   /*  is the code page name we are actually using.            */
   /*  This causes PCRE to convert the regex from IBM-285      */
   /*  to IBM-1047 before it is compiled, similarly the        */
   /*  string is converted before the match is done.           */

   /*  NOTE - this argument is only required if you use        */
   /*         a code page in your terminal emulator which      */
   /*         is NOT the same as the default local code page.  */
   /*         Normal processing by PCRE is to convert the      */
   /*         REGEX and string from the default local code     */
   /*         page to IBM-1047.                                */
   /*         IBM-1047 is used by the mainframe C compiler.    */

   pa_rm    = "INDSN(DSNAME(MEMBER))"

   reg_ex  = "\((.*)\)¢"
   opt_ion = "g"

   say pa_rm
   say reg_ex

   re_sponse = REXXPCRE(reg_ex,pa_rm,'wang',opt_ion,'IBM-285')

   select
      when re_sponse = 1 then do
         say 'wang.0  is  ' wang.0
         do lo_op_r = 1 to wang.0
            var_1  =  substr(wang_string.lo_op_r,1,30)
            var_2  =  substr(wang_pos.lo_op_r,1,10)
            var_3  =  wang_name.lo_op_r
            say  var_1 var_2 var_3
         end
        end
      when re_sponse = 0 then
         say 'no matches found'
      Otherwise
         say 'Error :' re_sponse
   end

   drop wang.

   "ispexec libdef ispllib "

   exit
